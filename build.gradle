apply plugin: 'java'
apply plugin: 'maven'
apply plugin: 'pmd'
apply plugin: 'findbugs'
apply plugin: 'checkstyle'
apply plugin: 'cobertura'
apply plugin: 'coveralls'

description = 'Pulse Chess'

group = 'com.fluxchess'
version = '1.2.0'
ext.releaseBranch = 'master'

if (!project.hasProperty('buildNumber') || !(project.hasProperty('branchName') && branchName == releaseBranch)) {
  // We're probably building on a dev machine or we're building a branch
  ext.buildNumber = 'dev'
}
if (!project.hasProperty('revisionNumber')) {
  // We're probably building on a dev machine
  ext.revisionNumber = 'dev'
}

if (!version.contains('-') && !(project.hasProperty('releaseVersion') && releaseVersion == version)) {
  // Append '-rc' if we're not releasing yet
  version += '-rc'
}

if (version.contains('-')) {
  // Append the buildNumber if we're not releasing
  version += '.' + buildNumber
}

if (version.contains('-') && !(project.hasProperty('branchName') && branchName == releaseBranch)) {
  // Append the revisionNumber if we're not releasing and not on a release branch
  version += '+' + revisionNumber
}

afterEvaluate { println "Building ${name} version ${version}" }

ext.os = System.getProperty('os.name').toLowerCase()

buildscript {
  repositories {
    mavenCentral()
  }

  dependencies {
    classpath 'net.saliman:gradle-cobertura-plugin:2.0.0'
    classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:0.1.6'
  }
}

repositories {
  mavenCentral()
  maven { url "http://maven.fluxchess.com/release" }
}

tasks.withType(Pmd) {
  pmd {
    ignoreFailures = true
  }
}

tasks.withType(FindBugs) {
  findbugs {
    ignoreFailures = true
  }
}

tasks.withType(Checkstyle) {
  checkstyle {
    configFile = new File("${rootDir}/config/checkstyle/checkstyle.xml")
    ignoreFailures = true
    showViolations = false
  }
}

cobertura.coverageFormats = ['html', 'xml']

sourceSets {
  integration
  testing
}

configurations {
  integrationCompile.extendsFrom testCompile
  integrationRuntime.extendsFrom testRuntime

  testingCompile.extendsFrom testCompile
  testingRuntime.extendsFrom testRuntime
}

dependencies {
  compile 'com.fluxchess:jcpi:1.4.+'

  testCompile 'junit:junit:4.+'
  testCompile 'com.fluxchess:jcpi:1.4.+:tests'
  testCompile 'org.slf4j:slf4j-api:1.7.+'
  testCompile 'org.slf4j:slf4j-log4j12:1.7.+'
  testCompile 'log4j:log4j:1.2.+'

  integrationCompile project(path: ':', configuration: 'testRuntime')

  testingCompile project(path: ':', configuration: 'testRuntime')
}

sourceCompatibility = 1.7
targetCompatibility = 1.7

processResources {
  filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
    version: project.version,
    buildNumber: project.buildNumber,
    revisionNumber: project.revisionNumber
  ])
}

jar {
  from {
    configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  }
  manifest {
    attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version, 'Main-Class': 'com.fluxchess.pulse.Pulse'
  }
}

task testsJar(type: Jar, dependsOn: testClasses) {
  classifier = 'tests'
  from sourceSets.test.output
}

task sourcesJar(type: Jar, dependsOn: classes) {
  classifier = 'sources'
  from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

task integration(type: Test) {
  testClassesDir = sourceSets.integration.output.classesDir
  classpath = sourceSets.integration.runtimeClasspath
}

ext.vendorDir = file("${buildDir}/vendor")
task vendor << {
  vendorDir.mkdirs()
}

task launch4j(dependsOn: vendor) {
  ext.launch4jDir = file("${vendorDir}/launch4j")

  def launch4jUrl = 'http://maven.fluxchess.com/vendor/launch4j-3.1.0-beta2-win32.zip'
  def launch4jZip = file("${vendorDir}/launch4j-3.1.0-beta2-win32.zip")

  outputs.file launch4jZip
  outputs.dir launch4jDir

  doLast {
    downloadFile(launch4jUrl, launch4jZip)

    copy {
      from zipTree(launch4jZip)
      into vendorDir
    }
  }
}

task exe(dependsOn: [jar, launch4j]) {
  ext.archivePath = file("${buildDir}/executables/${project.jar.baseName}-${project.jar.version}.exe")

  def launch4jCfg = 'launch4j.xml'
  def launch4jCfgDir = "${rootDir}/config/launch4j"

  inputs.file "${launch4jCfgDir}/${launch4jCfg}"
  outputs.files "${buildDir}/${launch4jCfg}", archivePath

  doLast {
    archivePath.getParentFile().mkdirs()

    copy {
      from "${launch4jCfgDir}/${launch4jCfg}"
      into buildDir
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        jarFile: project.jar.archivePath.toString(),
        exeFile: archivePath.toString()
      ])
    }

    exec {
      workingDir = buildDir
      commandLine "${launch4j.launch4jDir}/launch4jc.exe", "${buildDir}/${launch4jCfg}"
    }
  }
}

task dist(type: Zip) {
  def baseDir = "${project.name}-${project.version}"

  if (os.contains('windows')) {
    classifier = 'win'
  } else if (os.contains('linux')) {
    classifier = 'lnx'
  }

  into("$baseDir") {
    from 'README.md'
    from 'COPYING'
    from 'COPYING.LESSER'
    from 'src/dist/pulse.png'

    from jar
    from sourcesJar
    from javadocJar

    from exe.archivePath

    from('src/dist/Pulse') {
      fileMode = 0755
      filter(org.apache.tools.ant.filters.ReplaceTokens, tokens: [
        version: project.version
      ])
    }
  }
}
if (os.contains('windows')) {
  dist.dependsOn exe
}

artifacts {
  testCompile testsJar

  archives testsJar
  archives sourcesJar
  archives javadocJar
}

def downloadFile(srcUrl, destUrl) {
  def dest = new BufferedOutputStream(new FileOutputStream(destUrl))
  dest << new URL(srcUrl).openStream()
  dest.close()
}

task wrapper(type: Wrapper) {
  gradleVersion = '1.8'
}

apply plugin: 'idea'

idea {
  module {
    testSourceDirs += sourceSets.integration.java.srcDirs
    testSourceDirs += sourceSets.integration.resources.srcDirs
    testSourceDirs += sourceSets.testing.java.srcDirs
    testSourceDirs += sourceSets.testing.resources.srcDirs
  }
}
